---
import type { CollectionEntry } from 'astro:content'
import { getCollection } from 'astro:content'
import PostCard from '@/components/CommonCard.astro'
import Pagination from '@/components/Pagination.astro'
import TagsSchema from '@/components/seo/TagsSchema.astro'
import { getTagMetadata } from '@/consts'
import BaseLayout from '@/layouts/BaseLayout.astro'
import { getSpainTag } from '@/utils/tagMapping'
import type { GetStaticPaths } from 'astro'

type Post = CollectionEntry<'posts'>

interface PageProps {
  data: Post[]
  currentPage: number
  lastPage: number
}

export const getStaticPaths = (async () => {
  const allPosts = await getCollection('posts', ({ id }) => id.startsWith('es/'))
  const uniqueTags = [...new Set(allPosts.flatMap((post) => post.data.tags))]

  return uniqueTags.flatMap((tag) => {
    const spainTag = getSpainTag(tag, 'es')
    const filteredPosts = allPosts.filter((post) => post.data.tags.includes(tag) || post.data.tags.includes(spainTag))

    filteredPosts.sort((a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf())

    const pageSize = 12
    const totalPages = Math.ceil(filteredPosts.length / pageSize)

    return Array.from({ length: totalPages }, (_, index) => ({
      params: { tag, page: (index + 1).toString() },
      props: {
        page: {
          data: filteredPosts.slice(index * pageSize, (index + 1) * pageSize),
          currentPage: index + 1,
          lastPage: totalPages
        }
      }
    }))
  })
}) satisfies GetStaticPaths

interface Props {
  page: PageProps
}

const { tag } = Astro.params
const { page } = Astro.props as Props

if (typeof tag !== 'string') {
  throw new Error('Invalid tag parameter')
}

const currentLocale = 'es'
const { title, description } = getTagMetadata(tag, currentLocale)
---

<BaseLayout title={title} description={description}>
  <TagsSchema tag={tag} page={page} locale="es" />
  <h1 class="sr-only">All articles under tag "{tag}"</h1>
  <h2 class="sr-only">Article list</h2>
  <div class="mx-auto max-w-4xl px-4 py-8">
    <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
      {page.data.map((post) => <PostCard post={post} />)}
    </div>

    <Pagination
      currentPage={page.currentPage}
      lastPage={page.lastPage}
      urlPrev={page.currentPage > 1
        ? `/es/tags/${tag}/${page.currentPage - 1}`
        : null}
      urlNext={page.currentPage < page.lastPage
        ? `/es/tags/${tag}/${page.currentPage + 1}`
        : null}
      basePath={`/es/tags/${tag}`}
      maxDisplayedPages={5}
    />
  </div>
</BaseLayout>
